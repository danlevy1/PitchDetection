{"version":3,"sources":["App/MusicContainer/default.sf2","App/MusicContainer/AlphaTabAPIUtility.js","App/MusicContainer/sketch.js","App/MusicContainer/PitchDetection.js","App/MusicContainer/Drawer.js","App/MusicContainer/NoteList.js","App/MusicContainer/AlphaTabRunner.js","App/MusicContainer/MusicContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","AlphaTabAPIUtility","api","currentTracks","totalTracks","this","newTrackList","newTrackIndexes","i","document","getElementById","checked","push","score","tracks","length","renderTracks","trackIndex","p5","p","barCursor","alphaTabSurface","wrapper","drawer","canvas","previousPos","setup","drawerGiven","undefined","createCanvas","clientWidth","clientHeight","position","parent","noLoop","draw","currentHeight","sharpPos","fill","rect","note","midiVal","stroke","strokeWeight","line","noStroke","noteHeight","posX","getClientRects","left","valueOf","scrollLeft","ellipse","isSharp","text","belowOrAbove","isIncreasing","height","topLine","firstLine","distanceBetweenLines","Math","abs","PitchDetection","Promise","resolve","reject","audioContext","AudioContext","navigator","mediaDevices","getUserMedia","audio","then","micStream","ml5Setup","model","pitchDetectionModel","catch","err","label","querySelector","ml5","pitchDetection","ready","setInterval","redraw","getPitch","frequency","displayMidi","console","log","setIntervalID","clearInterval","midiNum","textContent","AlphaTabRunner","noteList","addNote","updateNote","average","Drawer","lowerLimit","upperLimit","lowerLimit2","upperLimit2","Note","getHeightOfNote","getExtraFeatures","heightMod","octaveMod","octave","totalMod","aboveBelowMod","base","difference","loopAdd","floor","modAmount","noteText","numToNote","charPart","letters","getOctave","NoteList","element","elements","pointer","total","lowerPitchBound","upperPitchBound","round","lowerBound","upperBound","settings","player","cursor","layout","scrollElement","window","alphaTab","platform","javaScript","AlphaTabApi","addPostRenderFinished","alphaTabRenderFinished","addPlayerStateChanged","alphaTabPlayerStateChanged","playerState","nextLine","lineReadyID","topLineHeight","y","animVal","value","updateBounds","setupPitchDetection","background","stopPitchDetection","intervalID","startPitchDetection","MusicContainer","state","tex","utilAPI","playPauseHandler","playPause","resumeAudioContextHandler","resume","initializeAPI","setState","id","data-tex","onClick","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.41ebe902.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.62c0ac55.sf2\";","// TODO: fix labelling of topLine when tracks are reloaded\n\nclass AlphaTabAPIUtility {\n    constructor(api, currentTracks, totalTracks) {\n        this.api = api;\n        this.currentTracks = currentTracks;\n        this.totalTracks = totalTracks;\n    }\n\n    /**\n     * Changes which tracks are being rendered by AlphaTab by checking for checkboxes\n     * Called when pressing Submit button after selecting checkboxes for which Tracks to render\n     */\n    changeTracks() {\n        // keeps track of the new Tracks to be rendered\n        let newTrackList = [];\n        // keeps track of the indexes of the Tracks to update our global currentTracks rendered\n        let newTrackIndexes = [];\n\n        for (let i = 1; i < this.totalTracks; i++) {\n            // Checkboxes for each Track were given IDs starting at t1\n            if (document.getElementById(\"t\" + i).checked) {\n                // This pushes the actual Track object into newTrackList to call renderTracks below\n                newTrackList.push(this.api.score.tracks[i - 1]);\n\n                newTrackIndexes.push(i - 1);\n            }\n        }\n\n        // if we have at least one Track to render, then render them and update the currentTracks variable\n        if (newTrackList.length !== 0) {\n            this.api.renderTracks(newTrackList);\n            this.currentTracks = newTrackIndexes;\n        } else {\n            // Otherwise, they have unchecked all of the checkboxes and AlphaTab won't render 0 tracks\n            // Therefore, we go through and recheck the Track checkboxes that were previously checked and ignore the input\n            for (let i = 0; i < this.currentTracks.length; i++) {\n                let trackIndex = this.currentTracks[i] + 1;\n                document.getElementById(\"t\" + trackIndex).checked = true;\n            }\n        }\n    }\n}\n\nexport default AlphaTabAPIUtility;\n","import p5 from \"p5\";\n\n/**\n * Wrapper for local p5 setup and draw functions\n * @param {sketch} p Sketch object that will include all of the functions that will be called by p5\n */\nconst p5Sketch = p => {\n    // how much space to add around note for drawing lines, obtained by guess and check\n    const EXTRA_BAR_VARIANCE = 7;\n\n    // document elements retrieved from the document\n    let barCursor;\n    let alphaTabSurface;\n    let wrapper;\n\n    // provided by reference which is updated in other functions\n    let drawer;\n\n    // reference to p5's canvas when created. It should overlay the AlphaTab canvas\n    let canvas;\n\n    // how large to draw the notehead\n    // TODO Dynamically change based on scale of music\n    let circleSize = 10;\n\n    let previousPos = [-1, -1, -1, -1];\n\n    /**\n     * This function is called twice. Once, upon initialization p5 calls it which we use to tell p5 to stop looping\n     * Then, AlphaTab will call setup when its done being rendered. Then, the canvas can be setup for drawing since\n     * the canvas overlays the AlphaTab container\n     * TODO Ensure that the canvas can resize when AlphaTab rerenders, use resizeCanvas\n     * @param {Drawer} drawerGiven p5 will not provide this but AlphaTabRunner provides a reference to the Drawer being used\n     */\n    p.setup = function(drawerGiven) {\n        if (drawerGiven === undefined) {\n            p.noLoop();\n            return;\n        }\n        drawer = drawerGiven;\n        // Retrieved by attaching unique IDs to elements generated by AlphaTab. Required editing AlphaTab.js directly\n        barCursor = document.getElementById(\"bC\");\n        alphaTabSurface = document.getElementById(\"aTS\");\n        wrapper = document.getElementById(\"wrapper\");\n\n\n        // creates a canvas that overlaps the alphaTabSurface. Position is absolute for the canvas by default\n        canvas = p.createCanvas(alphaTabSurface.clientWidth, alphaTabSurface.clientHeight);\n        const x = 0;\n        const y = 0;\n        canvas.position(x, y);\n        canvas.parent(\"sketch-holder\");\n    };\n\n    /**\n     * Draws the canvas on the screen. Requires that the canvas is not undefined ie setup has run\n     * TODO Handle sheet music scale\n     */\n    p.draw = function() {       \n        // sets the background color to greyish\n        //p.background(245);\n        // uncomment for white background, only need one color background so comment the other one if so\n        //p.background(255);\n\n        if (previousPos[0] !== -1 && previousPos[1] !== -1) {\n            p.fill(255);\n            p.rect(previousPos[0], 0, alphaTabSurface.clientWidth-previousPos[0], alphaTabSurface.clientHeight);\n            \n            if (drawer && drawer.note.midiVal >= 0 && previousPos[2] !== -1 && previousPos[3] !== -1) {\n                \n                p.stroke(255, 0, 255);\n                p.strokeWeight(3);\n                p.line(previousPos[0], previousPos[1], previousPos[2], previousPos[3]);\n                p.noStroke();\n            }\n            previousPos[2] = previousPos[0];\n            previousPos[3] = previousPos[1];\n        } \n\n        // dont draw the outline of the shape, note: you need to turn stroke on to draw lines as we do below.\n        p.noStroke();\n\n        let currentHeight;\n        let sharpPos;\n        if (drawer) {\n            currentHeight = drawer.noteHeight;\n            previousPos[1] = currentHeight;\n\n            // fills with pink\n            p.fill(255, 0, 255);\n\n            // Binds x position to the bar cursor\n            let posX = barCursor.getClientRects()[0].left.valueOf() + wrapper.scrollLeft;\n\n            // TODO Handle resizing scale\n            // places sharp if present beside the note. These magic values were calculated via trial and error\n            sharpPos = [posX - 14, currentHeight + 3.5];\n            previousPos[0] = sharpPos[0] - EXTRA_BAR_VARIANCE;\n\n            if (drawer.note.midiVal >= 0) {\n                // actually draws note circle at the given position\n                p.ellipse(posX, currentHeight, circleSize, circleSize);\n\n                // Sentinel value of -1 indicates silence\n                // if (drawer.note.midiVal < 0) {\n                //     // indicates that we want to draw lines\n                //     p.stroke(0);\n\n                //     // TODO Consider removing and not drawing note at all\n                //     // draws x through the note\n                //     p.line(\n                //         posX - EXTRA_BAR_VARIANCE,\n                //         currentHeight + EXTRA_BAR_VARIANCE,\n                //         posX + EXTRA_BAR_VARIANCE,\n                //         currentHeight - EXTRA_BAR_VARIANCE\n                //     );\n                //     p.line(\n                //         posX + EXTRA_BAR_VARIANCE,\n                //         currentHeight + EXTRA_BAR_VARIANCE,\n                //         posX - EXTRA_BAR_VARIANCE,\n                //         currentHeight - EXTRA_BAR_VARIANCE\n                //     );\n\n                //     // restore noStroke to not include outlines of other objects\n                //     p.noStroke();\n                // }\n\n                // TODO Handle resizing scale\n                // Adds sharp symbol if needed\n                if (drawer.note.isSharp) {\n                    p.text(\"#\", sharpPos[0], sharpPos[1]);\n                }\n\n                // TODO Ensure that this works when switching what part to sing with\n                // Adds ledger lines above or below the staff\n                if (drawer.belowOrAbove !== 0) {\n                    let isIncreasing = drawer.belowOrAbove > 0;\n                    p.stroke(0);\n                    p.strokeWeight(1);\n                    let height = isIncreasing\n                        ? drawer.topLine\n                        : drawer.firstLine - drawer.distanceBetweenLines;\n                    for (let i = 0; i < Math.abs(drawer.belowOrAbove); i++) {\n                        if (isIncreasing) {\n                            height -= drawer.distanceBetweenLines;\n                        } else {\n                            height += drawer.distanceBetweenLines;\n                        }\n                        p.line(posX - EXTRA_BAR_VARIANCE, height, posX + EXTRA_BAR_VARIANCE, height);\n                    }\n                    p.noStroke();\n                }\n            }\n        }\n\n        // TODO Remove and get a line across the screen\n        // Fills the screen with white which wipes the previous result\n        //p.fill(255);\n    };\n};\n\nexport default new p5(p5Sketch);\n","import ml5 from \"ml5\";\nimport p5 from \"./sketch\";\nimport AlphaTabRunner from \"./AlphaTabRunner\";\n\nclass PitchDetection {\n    audioContext;\n    micStream;\n    pitchDetectionModel;\n    label;\n    noteList;\n\n    /**\n     * Sets up pitch detection\n     */\n    static setupPitchDetection() {\n        return new Promise((resolve, reject) => {\n            // Create AudioContext instance\n            this.audioContext = new AudioContext();\n\n            // Starts microphone stream if available\n            if (navigator.mediaDevices) {\n                navigator.mediaDevices\n                    .getUserMedia({ audio: true })\n                    .then(micStream => {\n                        this.micStream = micStream;\n\n                        // Sets up ML5 pitch detection\n                        this.ml5Setup()\n                            .then(model => {\n                                this.pitchDetectionModel = model;\n                                resolve();\n                            })\n                            .catch(err => {\n                                reject(`[error][PitchDetection] ${err}`);\n                            });\n                    })\n                    .catch(err => {\n                        reject();\n                    });\n            } else {\n                reject(\"[warning][PitchDetection] Cannot access microphone\");\n            }\n        });\n    }\n\n    /**\n     * Sets up ML5 pitch detection\n     */\n    static ml5Setup() {\n        // Label element to display frequency\n        this.label = document.querySelector(\"#frequency\");\n\n        // Creates pitch detection model\n        return ml5.pitchDetection(\"./model/\", this.audioContext, this.micStream).ready;\n    }\n\n    /**\n     * Continuously detects pitch and displays it on the screen\n     * @returns The id of the current setInterval process (this can be used to stop the current setInterval process)\n     */\n    static startPitchDetection() {\n        // Run nested anonymous function every 1 ms\n        return setInterval(() => {\n            p5.redraw();\n\n            // Gets the current pitch and sends it to displayMidi\n            this.pitchDetectionModel.getPitch().then(frequency => {\n                this.displayMidi(frequency);\n            }).catch(err => {\n                console.log(`[error][PitchDetection] ${err}`);\n                this.displayMidi(0);\n            });\n        }, 1);\n    }\n\n    /**\n     * Stops the detection of the pitch\n     * @param {number} setIntervalID The id of the setInterval process to stop\n     */\n    static stopPitchDetection(setIntervalID) {\n        //console.log(\"NO LOOP\");\n        //p5.noLoop();\n        clearInterval(setIntervalID);\n    }\n\n    /**\n     * Displays the frequency as a midi value on the piece of music\n     * @param {number} frequency The frequency to convert and display\n     */\n    static displayMidi(frequency) {\n        if (frequency) {\n            // Converts frequency to midi value\n            let midiNum = (Math.log(frequency / 440) / Math.log(2)) * 12 + 69;\n            \n            this.label.textContent = midiNum;\n            \n            AlphaTabRunner.noteList.addNote(midiNum);\n            AlphaTabRunner.drawer.updateNote(AlphaTabRunner.noteList.average);\n        } else {\n            this.label.textContent = \"No Pitch Detected\";\n\n            // Sentinel value of 0 used for silence\n            AlphaTabRunner.noteList.addNote(0);\n            AlphaTabRunner.drawer.updateNote(AlphaTabRunner.noteList.average);\n        }\n    }\n}\n\nexport default PitchDetection;\n","/**\n * Keeps track of current note and where to draw it on the screen along with special information such as number of extra ledger lines\n */\nclass Drawer {\n    /**\n     * Creates a new Drawer setting up storage of the most recent midi note and information about how to draw it on the screen\n     * @param {Number} topLine Height of the top line of the selected part to sing\n     * @param {Number} distanceBetweenLines Distance between lines in the staff\n     */\n    constructor(topLine, distanceBetweenLines) {\n        this.topLine = topLine;\n        this.distanceBetweenLines = distanceBetweenLines;\n        // stores the height of the lowest line of the staff being sung\n        this.firstLine = this.topLine + this.distanceBetweenLines * 5;\n        // Values >= selected lower limit and <= selected upper limit don't need extra ledger lines\n        this.lowerLimit = 61; // 61 = C4#\n        this.upperLimit = 81; // 81 = A5\n        this.lowerLimit2 = 40; // 40 = E2\n        this.upperLimit2 = 60; // 60 = C4\n        this.note = new Note(60);\n        this.belowOrAbove = 0;\n        this.noteHeight = 0;\n        this.updateNote(this.note.midiVal);\n    }\n\n    /**\n     * Updates the Drawer to the new provided note\n     * @param {Number} note New midi value to store. Provide a -1 as a sentinel value for silence \n     */\n    updateNote(note) {\n        this.note.updateNote(note);\n        this.getHeightOfNote();\n        this.getExtraFeatures();\n    }\n\n    /**\n     * Updates the height of the note based on its midi value\n     */\n    getHeightOfNote() {\n        // -1 is a sentinel value for silence which is assigned a default height\n        if (this.note.midiVal === -1) {\n            this.noteHeight = this.firstLine;\n            return;\n        }\n        // Calculating the height of a note relies on the cycle in musical notes that occurs between octaves\n        // This calculates what the height of the note should be based on the first line\n        const heightMod = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6];\n\n        // C4 is the starting note so subtract 4 to get base octave\n        let octaveMod = this.note.octave - 4;\n        let value = heightMod[this.note.midiVal % heightMod.length];\n\n        // Includes bump to jump between octaves\n        let totalMod = value + octaveMod * 7;\n\n        // final height includes division by 2 because each value in the totalMod is distanceBetweenLines/2 \n        this.noteHeight = this.firstLine - (totalMod * this.distanceBetweenLines) / 2;      \n    }\n\n    /**\n     * Gets the extra features of a note including how many ledger lines to add\n     */\n    getExtraFeatures() {\n        // -1 is a sentinel value for silence which has no ledger lines\n        if (this.note.midiVal === -1) {\n            this.belowOrAbove = 0;\n            return;\n        }\n\n        // similar to note height, there's a cycle between octaves for ledger lines\n        const aboveBelowMod = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4];\n\n        // sets up base if ledger lines are even needed. base == 0 means no ledger lines\n        // base < 0 means they go below the staff, base > 0 means they go above the staff\n        // TODO Ensure this works with Bass clef\n        let base = 0;\n        if (this.note.midiVal >= this.upperLimit) {\n            base = this.upperLimit;\n        } else if (this.note.midiVal <= this.lowerLimit) {\n            base = -1 * this.lowerLimit;\n        }\n\n        // If need ledger lines, then calculate how many are required\n        if (base !== 0) {\n            let difference = Math.abs(Math.abs(base) - this.note.midiVal);\n            let loopAdd = 4 * Math.floor(difference / aboveBelowMod.length);\n            let modAmount = difference % aboveBelowMod.length;\n            modAmount = aboveBelowMod[modAmount];\n            this.belowOrAbove = loopAdd + modAmount;\n\n            // Signals to draw ledger lines below staff\n            if (base < 0) {\n                this.belowOrAbove *= -1;\n            }\n        } else {\n            this.belowOrAbove = 0;\n        }\n    }\n}\n\n/**\n * Stores midi value as its character representation including its octave and if it is sharp\n */\nclass Note {\n    /**\n     * Constructs a Note from a provided a given midiVal and converts it to a string which can be accessed\n     * @param {Number} midiVal Midi value of note to store\n     */\n    constructor(midiVal) {\n        this.updateNote(midiVal);\n    }\n\n    /**\n     * Updates the note stored to the new note\n     * @param {Number} note New midi value to store\n     */\n    updateNote(note) {\n        // No point in updating if the midi value matches the current one\n        if (this.midiVal && note === this.midiVal) {\n            return;\n        }\n\n        this.midiVal = note;\n        const noteText = this.numToNote();\n        this.charPart = noteText.charPart;\n        this.octave = noteText.octave;\n\n        // relies on the char part with being a single letter like G or two letters which is the note and # for sharp\n        this.isSharp = this.charPart.length === 2;\n    }\n\n    /**\n     * Gets the octave of the current note\n     * @returns The octave of the current note\n     */\n    getOctave() {\n        return Math.floor(this.midiVal / 12) - 1;\n    }\n\n    /**\n     * Converts the stored midi value to its character representation\n     * @returns A tuple with the character part and the octave\n     */\n    numToNote() {\n        let charPart;\n        let octave;\n\n        // -1 is a sentinel value for silence which has no char part or octave\n        if (this.midiVal === -1) {\n            charPart = \"-\";\n            octave = \"\";\n        } else {\n            const letters = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n            charPart = letters[this.midiVal % letters.length];\n            octave = this.getOctave(this.midiVal);\n        }\n        return { charPart, octave };\n    }\n}\n\nexport default Drawer;\n","const MAX_SIZE = 5;\n\n/**\n * Keeps a list of midi values to serve as a sample of the MAX_SIZE last midi values heard.\n */\nclass NoteList {\n\n    /**\n     * Creates a NoteList defaulting the lower pitch bound to 21 = A0 and the upper pitch bound to 127 = G9\n     * @param {Number} element Initial midi value to be stored in the list of values\n     */\n    constructor(element) {\n        this.elements = [element];\n        this.pointer = 0;\n        this.total = element;\n        this.average = element;\n        this.lowerPitchBound = 21;\n        this.upperPitchBound = 127;\n    }\n\n    /**\n     * Adds a midi value to the list of values overwriting the oldest value if full\n     * @param {Number} element Midi value to be stored in the list of values\n     */\n    addNote(element) {\n        // Adds element to the list overwriting the oldest value if full\n        if (this.elements.length < MAX_SIZE) {\n            this.elements.push(element);\n        } else {\n            this.total -= this.elements[this.pointer];\n            this.elements[this.pointer] = element;\n            this.pointer = (this.pointer + 1) % MAX_SIZE;\n        }\n        this.total += element;\n        this.average = Math.round(this.total / this.elements.length);\n\n        // if the provided midi value is 0, this is the special value for silence\n        // Also display silence if the average is out of bounds\n        if (\n            element === 0 ||\n            this.average < this.lowerPitchBound ||\n            this.average > this.upperPitchBound\n        ) {\n            // -1 is the sential value for silence to be diplayed\n            this.average = -1;\n        }\n    }\n\n    /**\n     * Updates the lower and upper bounds on the average in terms of midi values\n     * @param {Number} lowerBound Averages less than this midi value will be ignored\n     * @param {Number} upperBound Averages greater than this midi value will be ignored\n     */\n    updateBounds(lowerBound, upperBound) {\n        this.lowerPitchBound = lowerBound;\n        this.upperPitchBound = upperBound;\n    }\n}\n\nexport default NoteList;","// https://docs.alphatab.net/develop/  for development Documentation\n\nimport player from \"./default.sf2\";\nimport PitchDetection from \"./PitchDetection\";\nimport p5 from \"./sketch\";\nimport Drawer from \"./Drawer\";\nimport NoteList from \"./NoteList\";\n\n/**\n * Runs AlphaTab including initialization and keeping a Drawer and NoteList instance\n */\nclass AlphaTabRunner {\n    api;\n    intervalID;\n    drawer;\n    noteList;\n\n    /**\n     * Initializes the AlphaTab API\n     * Displays the piece of music on the screen\n     */\n    static initializeAPI() {\n        // TODO Pull from database on last loaded tracks\n        // Specifies what tracks to render on load\n        this.currentTracks = [0, 1, 2, 3, 4];\n\n        // AlphaTab API settings\n        let settings = {\n            player: player,\n            cursor: true,\n            tracks: this.currentTracks,\n            layout: \"horizontal\",\n            scrollElement: \"#wrapper\"\n        };\n\n        // Creates the AlphaTab API\n        this.api = new window.alphaTab.platform.javaScript.AlphaTabApi(\n            document.querySelector(\"#alpha-tab-container\"),\n            settings\n        );\n\n        // Listener is executed when AlphaTab is rendered on the screen\n        this.api.addPostRenderFinished(() => {\n            this.alphaTabRenderFinished();\n        });\n\n        // Listener is executed when the player state changes (e.g. play, pause, and stop)\n        AlphaTabRunner.api.addPlayerStateChanged(() => {\n            this.alphaTabPlayerStateChanged(AlphaTabRunner.api.playerState);\n        });\n    }\n\n    /**\n     * Run when AlphaTab is rendered on the screen\n     * TODO Fix so that it updates the variables on subsequent alphaTab renders besides the first one\n     */\n    static alphaTabRenderFinished() {\n        // TODO: Get this from the database and base it on what part is being sung for\n        // Retrieves staff lines using IDs attacked to elements generated by AlphaTab. Required editing AlphaTab.js directly\n        let topLine = document.getElementById(\"rect_0\");\n        let nextLine = document.getElementById(\"rect_1\");\n\n        // We were getting an error where rect_0 or rect_1 were null even though AlphaTab said they were rendered\n        // This sets up an interval to keep waiting for them to not be null before moving on with the render process\n        const lineReadyID = setInterval(() => {\n            // logs are for debugging purposes if this fix doesn't work as described above\n            console.log(\"running\",topLine);\n\n            if (topLine !== null && nextLine !== null) {\n                // stop interval from running\n                clearInterval(lineReadyID);\n                console.log(\"Done\",topLine);\n\n                // retrieves the height of the staff lines based on a relative offset to their wrapping contanier\n                // used to setup the canvas so the canvas needs to be directly on top of the alphaTab container where these are stored\n                const topLineHeight = topLine.y.animVal.value;\n                const distanceBetweenLines = nextLine.y.animVal.value - topLineHeight;\n\n                // TODO Update these values on subsequent renders since we just need to update their bounds\n                // Creates a new drawer and noteList\n                AlphaTabRunner.drawer = new Drawer(topLineHeight + 1, distanceBetweenLines);\n                AlphaTabRunner.noteList = new NoteList(0);\n\n                // TODO: Pull this from database\n                AlphaTabRunner.noteList.updateBounds(55, 82);\n                \n                p5.setup(AlphaTabRunner.drawer);\n\n                // Prepares for microphone input sets up the pitch detection model\n                PitchDetection.setupPitchDetection().then(() => {\n                    console.log(\"[info][AlphaTabRunner] Pitch Detection is ready\");\n                }).catch(err => {\n                    console.log(err);\n                });\n            } else {\n                topLine = document.getElementById(\"rect_0\");\n                nextLine = document.getElementById(\"rect_1\");\n            }\n        }, 3);\n    }\n\n    static alphaTabPlayerStateChanged(playerState) {\n        if (AlphaTabRunner.api.playerState !== 1) {\n            // TODO Consider moving this to clearing when starting. Will need to store performance so way because canvas currently\n            // moves across the screen which would make the line making tricky...Consider how to solve this problem\n            // Clears the canvas of performance upon stopping the music or when the music finishes playing\n            p5.background(255);\n\n            PitchDetection.stopPitchDetection(this.intervalID);\n        } else {\n            // Runs the pitch detection model on microphone input and displays it on the screen\n            // TODO: Don't show player controls (e.g. play and pause buttons) until AlphaTab and ML5 are ready\n            this.intervalID = PitchDetection.startPitchDetection();\n            console.log(this.intervalID);\n        }\n    }\n}\n\nexport default AlphaTabRunner;\n","import React, { Component } from \"react\";\nimport AlphaTabAPIUtility from \"./AlphaTabAPIUtility\";\nimport AlphaTabRunner from \"./AlphaTabRunner\";\nimport PitchDetection from \"./PitchDetection\";\nimport \"./MusicContainer.css\";\n\nclass MusicContainer extends Component {\n    state = {\n        tex: `\\\\title \"Down by the Riverside\"\n                \\\\subtitle \"Arranged by: Brant Adams. B.M.I.\"\n                \\\\tempo 84\n                .\n            \n                \\\\track \"Soprano\"\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\n                r.1 |\n                r.2 :4 d3 e3 |\n                g3{d}.2 :8 g3{-} a3 |\n                b3{d}.2 :8 b3{-} r |\n                \\\\ts 2 4 :4 b3 a3 |\n                \\\\ts 4 4 g3.1 |\n                :8 e3 d3 d3{- d}.2 :8 d3{-} r |\n                \\\\ts 2 4 :4 d3 e3 |\n                \\\\ts 4 4 g3{d}.2 :8 g3 a3 |\n                :2 b3 a3 |\n                g3.1 |\n                \\\\tempo 88\n                \\\\ts 4 4 :2 g3{-} r |\n            \n                \\\\track \"Alto\"\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\n                r.1 |\n                r.2 :4 d4 e4 |\n                g4.1 |\n                g4{- d}.2 :8 g4{-} r |\n                \\\\ts 2 4 f4.2 |\n                \\\\ts 4 4 :2 e4 c4 |\n                :8 c4 d4 d4{-}.2 :8 d4{-} r |\n                \\\\ts 2 4 :4 d4 e4 |\n                \\\\ts 4 4 g4{d}.2 e4.4 |\n                e4.2 :4 e4 c4 |\n                c4.1 |\n                \\\\tempo 88\n                \\\\ts 4 4 :2 b3 r |\n            \n                \\\\track \"Tenor\"\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G \\\\clef F4\n                :1 r | r | r | r | \\\\ts 2 4 r.2 | \\\\ts 4 4 :1 r | r |\n                \\\\ts 2 4 :4 d4 c4 |\n                \\\\ts 4 4 b3.1 |\n                :2 g3 a3 |\n                ab3.1 |\n                \\\\tempo 88\n                \\\\ts 4 4 :2 g3 r |\n            \n                \\\\track \"Bass\"\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G \\\\clef F4\n                :1 r | r | r | r | \\\\ts 2 4 r.2 | \\\\ts 4 4 :1 r | r | \\\\ts 2 4 r.2 |\n                \\\\ts 4 4 :4 g3 f3 e3 d3 |\n                c#3.2 :4 c3 d3 |\n                eb3.1 |\n                \\\\tempo 88\n                \\\\ts 4 4 :2 d3 r |\n            \n                \\\\track \"Piano Upper\"\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\n                r.8 d6{d}.4 d6{-}.2 |\n                r.8 d6{d}.4 d6{-}.2 |\n                r.8 d6{d}.4 d6{-}.2 |\n                r.8 :4 d6{d} d6{-} :4 (e6 b6) |\n                \\\\ts 2 4 :4 d5 a4{-} |\n                \\\\ts 4 4 r.8 d6{d}.4 d6{-}.2 |\n                r.8 d6{d}.4 d6{-}.2 |\n                \\\\ts 2 4 d6{-}.2 |\n                \\\\ts 4 4 r.8 d6{d}.4 d6{-}.2 |\n                r.4 :16 a4 b4 c#5 e5 f#5.4 :16 a4 c5 e5 f#5 |\n                g5.4 :16 ab4 bb4 c5 eb5 :8{tu 3} f5 g5 ab5 :8{tu 3} bb5 c6 eb6 |\n                \\\\tempo 88\n                \\\\ts 12 8 (a5{d} b5{d} d6{d}).2 a4{d}.2 |\n            \n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\n                r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\n                r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\n                r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\n                r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\n                \\\\ts 2 4 f4.2 |\n                \\\\ts 4 4 r.8 :16 g5 a5 :8 d5 e5 e5{-}.2 |\n                r.8 :16 a5 b5 :8 d5 e5 e5{-} a5 d6.4 |\n                \\\\ts 2 4 d6{-}.2 |\n                \\\\ts 4 4 r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\n                r.1 |\n                r.1 |\n                \\\\tempo 88\n                \\\\ts 12 8 :8 g2 d3 g3 a3 b3 d4 a4 d4 b3 a3 g3 d3 |\n            \n            \n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\n                :1 (d4 g4) |\n                :1 (d4 g4) |\n                :1 (d4 g4) |\n                :1 (d4 g4) |\n                \\\\ts 2 4 :2 (d4{-} g4{-}) |\n                \\\\ts 4 4 :1 (e4 g4) |\n                :1 (c4 d4 g4) |\n                \\\\ts 2 4 d4.2 |\n                \\\\ts 4 4 :2 (d4 g4) (e4 g4) |\n                :16 b3 c#4 e4 g4 g4{-}.4 :16 a3 c4 d4 e4 :8 f#4 d4 |\n                :16 ab3 c4 eb4 g4 (ab3{- d} c4{- d} eb4{- d} g4{- d}).2 |\n                \\\\tempo 88\n                \\\\clef F4\n                \\\\ts 12 8 :1 g2{d} |`,\n        utilAPI: null\n    };\n\n    /**\n     * Initializes the AlphaTab API\n     * Displays the piece of music on the screen\n     */\n    componentDidMount() {\n        // Initializes the AlphaTab API and displays the music\n        AlphaTabRunner.initializeAPI();\n\n        // TODO: What is utilAPI and does it need to be in this component's state?\n        this.setState({\n            utilAPI: new AlphaTabAPIUtility(\n                AlphaTabRunner.api,\n                AlphaTabRunner.currentTracks,\n                AlphaTabRunner.totalTracks\n            )\n        });\n    }\n\n    /**\n     * Plays or pauses the music\n     */\n    playPauseHandler = () => {\n        AlphaTabRunner.api.playPause();\n    };\n\n    /**\n     * Resumes the AudioContext so that microphone input can be streamed in\n     */\n    resumeAudioContextHandler = () => {\n        PitchDetection.audioContext\n            .resume()\n            .then(() => {\n                console.log(PitchDetection.audioContext.state)\n            })\n            .catch(err => {\n                console.log(`[error][MusicContainer] ${err}`);\n            });\n    };\n\n    render() {\n        return (\n            <section>\n                <div id='wrapper'>\n                    <div id='sketch-holder'></div>\n                    <div id='alpha-tab-container' data-tex='true'>\n                        {this.state.tex}\n                    </div>\n                </div>\n                <button onClick={this.playPauseHandler}>PLAY / PAUSE</button>\n                <button onClick={this.resumeAudioContextHandler}>RESUME</button>\n                <h2 id='frequency'>TEST</h2>\n            </section>\n        );\n    }\n}\n\nexport default MusicContainer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport MusicContainer from \"./MusicContainer/MusicContainer\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className='App'>\n                <MusicContainer />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}