{"version":3,"sources":["App/MusicContainer/default.sf2","App/MusicContainer/AlphaTabAPIUtility.js","App/MusicContainer/sketch.js","App/MusicContainer/PitchDetection.js","App/MusicContainer/Drawer.js","App/MusicContainer/NoteList.js","App/MusicContainer/AlphaTabRunner.js","App/MusicContainer/MusicContainer.js","App/App.js","serviceWorker.js","index.js"],"names":["module","exports","AlphaTabAPIUtility","api","currentTracks","totalTracks","this","newTrackList","newTrackIndexes","i","document","getElementById","checked","push","score","tracks","length","renderTracks","trackIndex","p5","p","barCursor","alphaTabSurface","wrapper","drawer","canvas","previousPos","setup","drawerGiven","undefined","createCanvas","clientWidth","clientHeight","position","parent","noLoop","draw","currentHeight","sharpPos","fill","rect","note","midiVal","stroke","strokeWeight","line","noStroke","noteHeight","posX","getClientRects","left","valueOf","scrollLeft","ellipse","isSharp","text","belowOrAbove","isIncreasing","height","topLine","firstLine","distanceBetweenLines","Math","abs","PitchDetection","Promise","resolve","reject","audioContext","AudioContext","navigator","mediaDevices","getUserMedia","audio","then","micStream","ml5Setup","model","pitchDetectionModel","catch","err","label","querySelector","ml5","pitchDetection","ready","setInterval","redraw","getPitch","frequency","displayMidi","console","log","setIntervalID","clearInterval","midiNum","textContent","AlphaTabRunner","noteList","addNote","updateNote","average","Drawer","lowerLimit","upperLimit","lowerLimit2","upperLimit2","Note","getHeightOfNote","getExtraFeatures","heightMod","octaveMod","octave","totalMod","aboveBelowMod","base","difference","loopAdd","floor","modAmount","noteText","numToNote","charPart","letters","getOctave","NoteList","element","elements","pointer","total","lowerPitchBound","upperPitchBound","round","lowerBound","upperBound","settings","player","cursor","layout","scrollElement","window","alphaTab","platform","javaScript","AlphaTabApi","addPostRenderFinished","alphaTabRenderFinished","addPlayerStateChanged","alphaTabPlayerStateChanged","playerState","nextLine","lineReadyID","topLineHeight","y","animVal","value","updateBounds","setupPitchDetection","background","stopPitchDetection","intervalID","startPitchDetection","MusicContainer","state","tex","utilAPI","playPauseHandler","playPause","resumeAudioContextHandler","resume","initializeAPI","setState","id","data-tex","onClick","Component","App","className","Boolean","location","hostname","match","ReactDOM","render","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.663df72c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.62c0ac55.sf2\";","// TODO: fix labelling of topLine when tracks are reloaded\r\n\r\nclass AlphaTabAPIUtility {\r\n    constructor(api, currentTracks, totalTracks) {\r\n        this.api = api;\r\n        this.currentTracks = currentTracks;\r\n        this.totalTracks = totalTracks;\r\n    }\r\n\r\n    /**\r\n     * Changes which tracks are being rendered by AlphaTab by checking for checkboxes\r\n     * Called when pressing Submit button after selecting checkboxes for which Tracks to render\r\n     */\r\n    changeTracks() {\r\n        // keeps track of the new Tracks to be rendered\r\n        let newTrackList = [];\r\n        // keeps track of the indexes of the Tracks to update our global currentTracks rendered\r\n        let newTrackIndexes = [];\r\n\r\n        for (let i = 1; i < this.totalTracks; i++) {\r\n            // Checkboxes for each Track were given IDs starting at t1\r\n            if (document.getElementById(\"t\" + i).checked) {\r\n                // This pushes the actual Track object into newTrackList to call renderTracks below\r\n                newTrackList.push(this.api.score.tracks[i - 1]);\r\n\r\n                newTrackIndexes.push(i - 1);\r\n            }\r\n        }\r\n\r\n        // if we have at least one Track to render, then render them and update the currentTracks variable\r\n        if (newTrackList.length !== 0) {\r\n            this.api.renderTracks(newTrackList);\r\n            this.currentTracks = newTrackIndexes;\r\n        } else {\r\n            // Otherwise, they have unchecked all of the checkboxes and AlphaTab won't render 0 tracks\r\n            // Therefore, we go through and recheck the Track checkboxes that were previously checked and ignore the input\r\n            for (let i = 0; i < this.currentTracks.length; i++) {\r\n                let trackIndex = this.currentTracks[i] + 1;\r\n                document.getElementById(\"t\" + trackIndex).checked = true;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlphaTabAPIUtility;\r\n","import p5 from \"p5\";\r\n\r\n/**\r\n * Wrapper for local p5 setup and draw functions\r\n * @param {sketch} p Sketch object that will include all of the functions that will be called by p5\r\n */\r\nconst p5Sketch = p => {\r\n    // how much space to add around note for drawing lines, obtained by guess and check\r\n    const EXTRA_BAR_VARIANCE = 7;\r\n\r\n    // document elements retrieved from the document\r\n    let barCursor;\r\n    let alphaTabSurface;\r\n    let wrapper;\r\n\r\n    // provided by reference which is updated in other functions\r\n    let drawer;\r\n\r\n    // reference to p5's canvas when created. It should overlay the AlphaTab canvas\r\n    let canvas;\r\n\r\n    // how large to draw the notehead\r\n    // TODO Dynamically change based on scale of music\r\n    let circleSize = 10;\r\n\r\n    let previousPos = [-1, -1, -1, -1];\r\n\r\n    /**\r\n     * This function is called twice. Once, upon initialization p5 calls it which we use to tell p5 to stop looping\r\n     * Then, AlphaTab will call setup when its done being rendered. Then, the canvas can be setup for drawing since\r\n     * the canvas overlays the AlphaTab container\r\n     * TODO Ensure that the canvas can resize when AlphaTab rerenders, use resizeCanvas\r\n     * @param {Drawer} drawerGiven p5 will not provide this but AlphaTabRunner provides a reference to the Drawer being used\r\n     */\r\n    p.setup = function(drawerGiven) {\r\n        if (drawerGiven === undefined) {\r\n            p.noLoop();\r\n            return;\r\n        }\r\n        drawer = drawerGiven;\r\n        // Retrieved by attaching unique IDs to elements generated by AlphaTab. Required editing AlphaTab.js directly\r\n        barCursor = document.getElementById(\"bC\");\r\n        alphaTabSurface = document.getElementById(\"aTS\");\r\n        wrapper = document.getElementById(\"wrapper\");\r\n\r\n\r\n        // creates a canvas that overlaps the alphaTabSurface. Position is absolute for the canvas by default\r\n        canvas = p.createCanvas(alphaTabSurface.clientWidth, alphaTabSurface.clientHeight);\r\n        const x = 0;\r\n        const y = 0;\r\n        canvas.position(x, y);\r\n        canvas.parent(\"sketch-holder\");\r\n    };\r\n\r\n    /**\r\n     * Draws the canvas on the screen. Requires that the canvas is not undefined ie setup has run\r\n     * TODO Handle sheet music scale\r\n     */\r\n    p.draw = function() {       \r\n        // sets the background color to greyish\r\n        //p.background(245);\r\n        // uncomment for white background, only need one color background so comment the other one if so\r\n        //p.background(255);\r\n\r\n        if (previousPos[0] !== -1 && previousPos[1] !== -1) {\r\n            p.fill(255);\r\n            p.rect(previousPos[0], 0, alphaTabSurface.clientWidth-previousPos[0], alphaTabSurface.clientHeight);\r\n            \r\n            if (drawer && drawer.note.midiVal >= 0 && previousPos[2] !== -1 && previousPos[3] !== -1) {\r\n                \r\n                p.stroke(255, 0, 255);\r\n                p.strokeWeight(3);\r\n                p.line(previousPos[0], previousPos[1], previousPos[2], previousPos[3]);\r\n                p.noStroke();\r\n            }\r\n            previousPos[2] = previousPos[0];\r\n            previousPos[3] = previousPos[1];\r\n        } \r\n\r\n        // dont draw the outline of the shape, note: you need to turn stroke on to draw lines as we do below.\r\n        p.noStroke();\r\n\r\n        let currentHeight;\r\n        let sharpPos;\r\n        if (drawer) {\r\n            currentHeight = drawer.noteHeight;\r\n            previousPos[1] = currentHeight;\r\n\r\n            // fills with pink\r\n            p.fill(255, 0, 255);\r\n\r\n            // Binds x position to the bar cursor\r\n            let posX = barCursor.getClientRects()[0].left.valueOf() + wrapper.scrollLeft;\r\n\r\n            // TODO Handle resizing scale\r\n            // places sharp if present beside the note. These magic values were calculated via trial and error\r\n            sharpPos = [posX - 14, currentHeight + 3.5];\r\n            previousPos[0] = sharpPos[0] - EXTRA_BAR_VARIANCE;\r\n\r\n            if (drawer.note.midiVal >= 0) {\r\n                // actually draws note circle at the given position\r\n                p.ellipse(posX, currentHeight, circleSize, circleSize);\r\n\r\n                // Sentinel value of -1 indicates silence\r\n                // if (drawer.note.midiVal < 0) {\r\n                //     // indicates that we want to draw lines\r\n                //     p.stroke(0);\r\n\r\n                //     // TODO Consider removing and not drawing note at all\r\n                //     // draws x through the note\r\n                //     p.line(\r\n                //         posX - EXTRA_BAR_VARIANCE,\r\n                //         currentHeight + EXTRA_BAR_VARIANCE,\r\n                //         posX + EXTRA_BAR_VARIANCE,\r\n                //         currentHeight - EXTRA_BAR_VARIANCE\r\n                //     );\r\n                //     p.line(\r\n                //         posX + EXTRA_BAR_VARIANCE,\r\n                //         currentHeight + EXTRA_BAR_VARIANCE,\r\n                //         posX - EXTRA_BAR_VARIANCE,\r\n                //         currentHeight - EXTRA_BAR_VARIANCE\r\n                //     );\r\n\r\n                //     // restore noStroke to not include outlines of other objects\r\n                //     p.noStroke();\r\n                // }\r\n\r\n                // TODO Handle resizing scale\r\n                // Adds sharp symbol if needed\r\n                if (drawer.note.isSharp) {\r\n                    p.text(\"#\", sharpPos[0], sharpPos[1]);\r\n                }\r\n\r\n                // TODO Ensure that this works when switching what part to sing with\r\n                // Adds ledger lines above or below the staff\r\n                if (drawer.belowOrAbove !== 0) {\r\n                    let isIncreasing = drawer.belowOrAbove > 0;\r\n                    p.stroke(0);\r\n                    p.strokeWeight(1);\r\n                    let height = isIncreasing\r\n                        ? drawer.topLine\r\n                        : drawer.firstLine - drawer.distanceBetweenLines;\r\n                    for (let i = 0; i < Math.abs(drawer.belowOrAbove); i++) {\r\n                        if (isIncreasing) {\r\n                            height -= drawer.distanceBetweenLines;\r\n                        } else {\r\n                            height += drawer.distanceBetweenLines;\r\n                        }\r\n                        p.line(posX - EXTRA_BAR_VARIANCE, height, posX + EXTRA_BAR_VARIANCE, height);\r\n                    }\r\n                    p.noStroke();\r\n                }\r\n            }\r\n        }\r\n\r\n        // TODO Remove and get a line across the screen\r\n        // Fills the screen with white which wipes the previous result\r\n        //p.fill(255);\r\n    };\r\n};\r\n\r\nexport default new p5(p5Sketch);\r\n","import ml5 from \"ml5\";\r\nimport p5 from \"./sketch\";\r\nimport AlphaTabRunner from \"./AlphaTabRunner\";\r\n\r\nclass PitchDetection {\r\n    audioContext;\r\n    micStream;\r\n    pitchDetectionModel;\r\n    label;\r\n    noteList;\r\n\r\n    /**\r\n     * Sets up pitch detection\r\n     */\r\n    static setupPitchDetection() {\r\n        return new Promise((resolve, reject) => {\r\n            // Create AudioContext instance\r\n            this.audioContext = new AudioContext();\r\n\r\n            // Starts microphone stream if available\r\n            if (navigator.mediaDevices) {\r\n                navigator.mediaDevices\r\n                    .getUserMedia({ audio: true })\r\n                    .then(micStream => {\r\n                        this.micStream = micStream;\r\n\r\n                        // Sets up ML5 pitch detection\r\n                        this.ml5Setup()\r\n                            .then(model => {\r\n                                this.pitchDetectionModel = model;\r\n                                resolve();\r\n                            })\r\n                            .catch(err => {\r\n                                reject(`[error][PitchDetection] ${err}`);\r\n                            });\r\n                    })\r\n                    .catch(err => {\r\n                        reject();\r\n                    });\r\n            } else {\r\n                reject(\"[warning][PitchDetection] Cannot access microphone\");\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Sets up ML5 pitch detection\r\n     */\r\n    static ml5Setup() {\r\n        // Label element to display frequency\r\n        this.label = document.querySelector(\"#frequency\");\r\n\r\n        // Creates pitch detection model\r\n        return ml5.pitchDetection(\"./model/\", this.audioContext, this.micStream).ready;\r\n    }\r\n\r\n    /**\r\n     * Continuously detects pitch and displays it on the screen\r\n     * @returns The id of the current setInterval process (this can be used to stop the current setInterval process)\r\n     */\r\n    static startPitchDetection() {\r\n        // Run nested anonymous function every 1 ms\r\n        return setInterval(() => {\r\n            p5.redraw();\r\n\r\n            // Gets the current pitch and sends it to displayMidi\r\n            this.pitchDetectionModel.getPitch().then(frequency => {\r\n                this.displayMidi(frequency);\r\n            }).catch(err => {\r\n                console.log(`[error][PitchDetection] ${err}`);\r\n                this.displayMidi(0);\r\n            });\r\n        }, 1);\r\n    }\r\n\r\n    /**\r\n     * Stops the detection of the pitch\r\n     * @param {number} setIntervalID The id of the setInterval process to stop\r\n     */\r\n    static stopPitchDetection(setIntervalID) {\r\n        //console.log(\"NO LOOP\");\r\n        //p5.noLoop();\r\n        clearInterval(setIntervalID);\r\n    }\r\n\r\n    /**\r\n     * Displays the frequency as a midi value on the piece of music\r\n     * @param {number} frequency The frequency to convert and display\r\n     */\r\n    static displayMidi(frequency) {\r\n        if (frequency) {\r\n            // Converts frequency to midi value\r\n            let midiNum = (Math.log(frequency / 440) / Math.log(2)) * 12 + 69;\r\n            \r\n            this.label.textContent = midiNum;\r\n            \r\n            AlphaTabRunner.noteList.addNote(midiNum);\r\n            AlphaTabRunner.drawer.updateNote(AlphaTabRunner.noteList.average);\r\n        } else {\r\n            this.label.textContent = \"No Pitch Detected\";\r\n\r\n            // Sentinel value of 0 used for silence\r\n            AlphaTabRunner.noteList.addNote(0);\r\n            AlphaTabRunner.drawer.updateNote(AlphaTabRunner.noteList.average);\r\n        }\r\n    }\r\n}\r\n\r\nexport default PitchDetection;\r\n","/**\r\n * Keeps track of current note and where to draw it on the screen along with special information such as number of extra ledger lines\r\n */\r\nclass Drawer {\r\n    /**\r\n     * Creates a new Drawer setting up storage of the most recent midi note and information about how to draw it on the screen\r\n     * @param {Number} topLine Height of the top line of the selected part to sing\r\n     * @param {Number} distanceBetweenLines Distance between lines in the staff\r\n     */\r\n    constructor(topLine, distanceBetweenLines) {\r\n        this.topLine = topLine;\r\n        this.distanceBetweenLines = distanceBetweenLines;\r\n        // stores the height of the lowest line of the staff being sung\r\n        this.firstLine = this.topLine + this.distanceBetweenLines * 5;\r\n        // Values >= selected lower limit and <= selected upper limit don't need extra ledger lines\r\n        this.lowerLimit = 61; // 61 = C4#\r\n        this.upperLimit = 81; // 81 = A5\r\n        this.lowerLimit2 = 40; // 40 = E2\r\n        this.upperLimit2 = 60; // 60 = C4\r\n        this.note = new Note(60);\r\n        this.belowOrAbove = 0;\r\n        this.noteHeight = 0;\r\n        this.updateNote(this.note.midiVal);\r\n    }\r\n\r\n    /**\r\n     * Updates the Drawer to the new provided note\r\n     * @param {Number} note New midi value to store. Provide a -1 as a sentinel value for silence \r\n     */\r\n    updateNote(note) {\r\n        this.note.updateNote(note);\r\n        this.getHeightOfNote();\r\n        this.getExtraFeatures();\r\n    }\r\n\r\n    /**\r\n     * Updates the height of the note based on its midi value\r\n     */\r\n    getHeightOfNote() {\r\n        // -1 is a sentinel value for silence which is assigned a default height\r\n        if (this.note.midiVal === -1) {\r\n            this.noteHeight = this.firstLine;\r\n            return;\r\n        }\r\n        // Calculating the height of a note relies on the cycle in musical notes that occurs between octaves\r\n        // This calculates what the height of the note should be based on the first line\r\n        const heightMod = [0, 0, 1, 1, 2, 3, 3, 4, 4, 5, 5, 6];\r\n\r\n        // C4 is the starting note so subtract 4 to get base octave\r\n        let octaveMod = this.note.octave - 4;\r\n        let value = heightMod[this.note.midiVal % heightMod.length];\r\n\r\n        // Includes bump to jump between octaves\r\n        let totalMod = value + octaveMod * 7;\r\n\r\n        // final height includes division by 2 because each value in the totalMod is distanceBetweenLines/2 \r\n        this.noteHeight = this.firstLine - (totalMod * this.distanceBetweenLines) / 2;      \r\n    }\r\n\r\n    /**\r\n     * Gets the extra features of a note including how many ledger lines to add\r\n     */\r\n    getExtraFeatures() {\r\n        // -1 is a sentinel value for silence which has no ledger lines\r\n        if (this.note.midiVal === -1) {\r\n            this.belowOrAbove = 0;\r\n            return;\r\n        }\r\n\r\n        // similar to note height, there's a cycle between octaves for ledger lines\r\n        const aboveBelowMod = [1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4];\r\n\r\n        // sets up base if ledger lines are even needed. base == 0 means no ledger lines\r\n        // base < 0 means they go below the staff, base > 0 means they go above the staff\r\n        // TODO Ensure this works with Bass clef\r\n        let base = 0;\r\n        if (this.note.midiVal >= this.upperLimit) {\r\n            base = this.upperLimit;\r\n        } else if (this.note.midiVal <= this.lowerLimit) {\r\n            base = -1 * this.lowerLimit;\r\n        }\r\n\r\n        // If need ledger lines, then calculate how many are required\r\n        if (base !== 0) {\r\n            let difference = Math.abs(Math.abs(base) - this.note.midiVal);\r\n            let loopAdd = 4 * Math.floor(difference / aboveBelowMod.length);\r\n            let modAmount = difference % aboveBelowMod.length;\r\n            modAmount = aboveBelowMod[modAmount];\r\n            this.belowOrAbove = loopAdd + modAmount;\r\n\r\n            // Signals to draw ledger lines below staff\r\n            if (base < 0) {\r\n                this.belowOrAbove *= -1;\r\n            }\r\n        } else {\r\n            this.belowOrAbove = 0;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Stores midi value as its character representation including its octave and if it is sharp\r\n */\r\nclass Note {\r\n    /**\r\n     * Constructs a Note from a provided a given midiVal and converts it to a string which can be accessed\r\n     * @param {Number} midiVal Midi value of note to store\r\n     */\r\n    constructor(midiVal) {\r\n        this.updateNote(midiVal);\r\n    }\r\n\r\n    /**\r\n     * Updates the note stored to the new note\r\n     * @param {Number} note New midi value to store\r\n     */\r\n    updateNote(note) {\r\n        // No point in updating if the midi value matches the current one\r\n        if (this.midiVal && note === this.midiVal) {\r\n            return;\r\n        }\r\n\r\n        this.midiVal = note;\r\n        const noteText = this.numToNote();\r\n        this.charPart = noteText.charPart;\r\n        this.octave = noteText.octave;\r\n\r\n        // relies on the char part with being a single letter like G or two letters which is the note and # for sharp\r\n        this.isSharp = this.charPart.length === 2;\r\n    }\r\n\r\n    /**\r\n     * Gets the octave of the current note\r\n     * @returns The octave of the current note\r\n     */\r\n    getOctave() {\r\n        return Math.floor(this.midiVal / 12) - 1;\r\n    }\r\n\r\n    /**\r\n     * Converts the stored midi value to its character representation\r\n     * @returns A tuple with the character part and the octave\r\n     */\r\n    numToNote() {\r\n        let charPart;\r\n        let octave;\r\n\r\n        // -1 is a sentinel value for silence which has no char part or octave\r\n        if (this.midiVal === -1) {\r\n            charPart = \"-\";\r\n            octave = \"\";\r\n        } else {\r\n            const letters = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\r\n            charPart = letters[this.midiVal % letters.length];\r\n            octave = this.getOctave(this.midiVal);\r\n        }\r\n        return { charPart, octave };\r\n    }\r\n}\r\n\r\nexport default Drawer;\r\n","const MAX_SIZE = 5;\r\n\r\n/**\r\n * Keeps a list of midi values to serve as a sample of the MAX_SIZE last midi values heard.\r\n */\r\nclass NoteList {\r\n\r\n    /**\r\n     * Creates a NoteList defaulting the lower pitch bound to 21 = A0 and the upper pitch bound to 127 = G9\r\n     * @param {Number} element Initial midi value to be stored in the list of values\r\n     */\r\n    constructor(element) {\r\n        this.elements = [element];\r\n        this.pointer = 0;\r\n        this.total = element;\r\n        this.average = element;\r\n        this.lowerPitchBound = 21;\r\n        this.upperPitchBound = 127;\r\n    }\r\n\r\n    /**\r\n     * Adds a midi value to the list of values overwriting the oldest value if full\r\n     * @param {Number} element Midi value to be stored in the list of values\r\n     */\r\n    addNote(element) {\r\n        // Adds element to the list overwriting the oldest value if full\r\n        if (this.elements.length < MAX_SIZE) {\r\n            this.elements.push(element);\r\n        } else {\r\n            this.total -= this.elements[this.pointer];\r\n            this.elements[this.pointer] = element;\r\n            this.pointer = (this.pointer + 1) % MAX_SIZE;\r\n        }\r\n        this.total += element;\r\n        this.average = Math.round(this.total / this.elements.length);\r\n\r\n        // if the provided midi value is 0, this is the special value for silence\r\n        // Also display silence if the average is out of bounds\r\n        if (\r\n            element === 0 ||\r\n            this.average < this.lowerPitchBound ||\r\n            this.average > this.upperPitchBound\r\n        ) {\r\n            // -1 is the sential value for silence to be diplayed\r\n            this.average = -1;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the lower and upper bounds on the average in terms of midi values\r\n     * @param {Number} lowerBound Averages less than this midi value will be ignored\r\n     * @param {Number} upperBound Averages greater than this midi value will be ignored\r\n     */\r\n    updateBounds(lowerBound, upperBound) {\r\n        this.lowerPitchBound = lowerBound;\r\n        this.upperPitchBound = upperBound;\r\n    }\r\n}\r\n\r\nexport default NoteList;","// https://docs.alphatab.net/develop/  for development Documentation\r\n\r\nimport player from \"./default.sf2\";\r\nimport PitchDetection from \"./PitchDetection\";\r\nimport p5 from \"./sketch\";\r\nimport Drawer from \"./Drawer\";\r\nimport NoteList from \"./NoteList\";\r\n\r\n/**\r\n * Runs AlphaTab including initialization and keeping a Drawer and NoteList instance\r\n */\r\nclass AlphaTabRunner {\r\n    api;\r\n    intervalID;\r\n    drawer;\r\n    noteList;\r\n\r\n    /**\r\n     * Initializes the AlphaTab API\r\n     * Displays the piece of music on the screen\r\n     */\r\n    static initializeAPI() {\r\n        // TODO Pull from database on last loaded tracks\r\n        // Specifies what tracks to render on load\r\n        this.currentTracks = [0, 1, 2, 3, 4];\r\n\r\n        // AlphaTab API settings\r\n        let settings = {\r\n            player: player,\r\n            cursor: true,\r\n            tracks: this.currentTracks,\r\n            layout: \"horizontal\",\r\n            scrollElement: \"#wrapper\"\r\n        };\r\n\r\n        // Creates the AlphaTab API\r\n        this.api = new window.alphaTab.platform.javaScript.AlphaTabApi(\r\n            document.querySelector(\"#alpha-tab-container\"),\r\n            settings\r\n        );\r\n\r\n        // Listener is executed when AlphaTab is rendered on the screen\r\n        this.api.addPostRenderFinished(() => {\r\n            this.alphaTabRenderFinished();\r\n        });\r\n\r\n        // Listener is executed when the player state changes (e.g. play, pause, and stop)\r\n        AlphaTabRunner.api.addPlayerStateChanged(() => {\r\n            this.alphaTabPlayerStateChanged(AlphaTabRunner.api.playerState);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Run when AlphaTab is rendered on the screen\r\n     * TODO Fix so that it updates the variables on subsequent alphaTab renders besides the first one\r\n     */\r\n    static alphaTabRenderFinished() {\r\n        // TODO: Get this from the database and base it on what part is being sung for\r\n        // Retrieves staff lines using IDs attacked to elements generated by AlphaTab. Required editing AlphaTab.js directly\r\n        let topLine = document.getElementById(\"rect_0\");\r\n        let nextLine = document.getElementById(\"rect_1\");\r\n\r\n        // We were getting an error where rect_0 or rect_1 were null even though AlphaTab said they were rendered\r\n        // This sets up an interval to keep waiting for them to not be null before moving on with the render process\r\n        const lineReadyID = setInterval(() => {\r\n            // logs are for debugging purposes if this fix doesn't work as described above\r\n            console.log(\"running\",topLine);\r\n\r\n            if (topLine !== null && nextLine !== null) {\r\n                // stop interval from running\r\n                clearInterval(lineReadyID);\r\n                console.log(\"Done\",topLine);\r\n\r\n                // retrieves the height of the staff lines based on a relative offset to their wrapping contanier\r\n                // used to setup the canvas so the canvas needs to be directly on top of the alphaTab container where these are stored\r\n                const topLineHeight = topLine.y.animVal.value;\r\n                const distanceBetweenLines = nextLine.y.animVal.value - topLineHeight;\r\n\r\n                // TODO Update these values on subsequent renders since we just need to update their bounds\r\n                // Creates a new drawer and noteList\r\n                AlphaTabRunner.drawer = new Drawer(topLineHeight + 1, distanceBetweenLines);\r\n                AlphaTabRunner.noteList = new NoteList(0);\r\n\r\n                // TODO: Pull this from database\r\n                AlphaTabRunner.noteList.updateBounds(55, 82);\r\n                \r\n                p5.setup(AlphaTabRunner.drawer);\r\n\r\n                // Prepares for microphone input sets up the pitch detection model\r\n                PitchDetection.setupPitchDetection().then(() => {\r\n                    console.log(\"[info][AlphaTabRunner] Pitch Detection is ready\");\r\n                }).catch(err => {\r\n                    console.log(err);\r\n                });\r\n            } else {\r\n                topLine = document.getElementById(\"rect_0\");\r\n                nextLine = document.getElementById(\"rect_1\");\r\n            }\r\n        }, 3);\r\n    }\r\n\r\n    static alphaTabPlayerStateChanged(playerState) {\r\n        if (AlphaTabRunner.api.playerState !== 1) {\r\n            // TODO Consider moving this to clearing when starting. Will need to store performance so way because canvas currently\r\n            // moves across the screen which would make the line making tricky...Consider how to solve this problem\r\n            // Clears the canvas of performance upon stopping the music or when the music finishes playing\r\n            p5.background(255);\r\n\r\n            PitchDetection.stopPitchDetection(this.intervalID);\r\n        } else {\r\n            // Runs the pitch detection model on microphone input and displays it on the screen\r\n            // TODO: Don't show player controls (e.g. play and pause buttons) until AlphaTab and ML5 are ready\r\n            this.intervalID = PitchDetection.startPitchDetection();\r\n            console.log(this.intervalID);\r\n        }\r\n    }\r\n}\r\n\r\nexport default AlphaTabRunner;\r\n","import React, { Component } from \"react\";\r\nimport AlphaTabAPIUtility from \"./AlphaTabAPIUtility\";\r\nimport AlphaTabRunner from \"./AlphaTabRunner\";\r\nimport PitchDetection from \"./PitchDetection\";\r\nimport \"./MusicContainer.css\";\r\n\r\nclass MusicContainer extends Component {\r\n    state = {\r\n        tex: `\\\\title \"Down by the Riverside\"\r\n                \\\\subtitle \"Arranged by: Brant Adams. B.M.I.\"\r\n                \\\\tempo 84\r\n                .\r\n            \r\n                \\\\track \"Soprano\"\r\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\r\n                r.1 |\r\n                r.2 :4 d3 e3 |\r\n                g3{d}.2 :8 g3{-} a3 |\r\n                b3{d}.2 :8 b3{-} r |\r\n                \\\\ts 2 4 :4 b3 a3 |\r\n                \\\\ts 4 4 g3.1 |\r\n                :8 e3 d3 d3{- d}.2 :8 d3{-} r |\r\n                \\\\ts 2 4 :4 d3 e3 |\r\n                \\\\ts 4 4 g3{d}.2 :8 g3 a3 |\r\n                :2 b3 a3 |\r\n                g3.1 |\r\n                \\\\tempo 88\r\n                \\\\ts 4 4 :2 g3{-} r |\r\n            \r\n                \\\\track \"Alto\"\r\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\r\n                r.1 |\r\n                r.2 :4 d4 e4 |\r\n                g4.1 |\r\n                g4{- d}.2 :8 g4{-} r |\r\n                \\\\ts 2 4 f4.2 |\r\n                \\\\ts 4 4 :2 e4 c4 |\r\n                :8 c4 d4 d4{-}.2 :8 d4{-} r |\r\n                \\\\ts 2 4 :4 d4 e4 |\r\n                \\\\ts 4 4 g4{d}.2 e4.4 |\r\n                e4.2 :4 e4 c4 |\r\n                c4.1 |\r\n                \\\\tempo 88\r\n                \\\\ts 4 4 :2 b3 r |\r\n            \r\n                \\\\track \"Tenor\"\r\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G \\\\clef F4\r\n                :1 r | r | r | r | \\\\ts 2 4 r.2 | \\\\ts 4 4 :1 r | r |\r\n                \\\\ts 2 4 :4 d4 c4 |\r\n                \\\\ts 4 4 b3.1 |\r\n                :2 g3 a3 |\r\n                ab3.1 |\r\n                \\\\tempo 88\r\n                \\\\ts 4 4 :2 g3 r |\r\n            \r\n                \\\\track \"Bass\"\r\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G \\\\clef F4\r\n                :1 r | r | r | r | \\\\ts 2 4 r.2 | \\\\ts 4 4 :1 r | r | \\\\ts 2 4 r.2 |\r\n                \\\\ts 4 4 :4 g3 f3 e3 d3 |\r\n                c#3.2 :4 c3 d3 |\r\n                eb3.1 |\r\n                \\\\tempo 88\r\n                \\\\ts 4 4 :2 d3 r |\r\n            \r\n                \\\\track \"Piano Upper\"\r\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\r\n                r.8 d6{d}.4 d6{-}.2 |\r\n                r.8 d6{d}.4 d6{-}.2 |\r\n                r.8 d6{d}.4 d6{-}.2 |\r\n                r.8 :4 d6{d} d6{-} :4 (e6 b6) |\r\n                \\\\ts 2 4 :4 d5 a4{-} |\r\n                \\\\ts 4 4 r.8 d6{d}.4 d6{-}.2 |\r\n                r.8 d6{d}.4 d6{-}.2 |\r\n                \\\\ts 2 4 d6{-}.2 |\r\n                \\\\ts 4 4 r.8 d6{d}.4 d6{-}.2 |\r\n                r.4 :16 a4 b4 c#5 e5 f#5.4 :16 a4 c5 e5 f#5 |\r\n                g5.4 :16 ab4 bb4 c5 eb5 :8{tu 3} f5 g5 ab5 :8{tu 3} bb5 c6 eb6 |\r\n                \\\\tempo 88\r\n                \\\\ts 12 8 (a5{d} b5{d} d6{d}).2 a4{d}.2 |\r\n            \r\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\r\n                r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\r\n                r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\r\n                r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\r\n                r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\r\n                \\\\ts 2 4 f4.2 |\r\n                \\\\ts 4 4 r.8 :16 g5 a5 :8 d5 e5 e5{-}.2 |\r\n                r.8 :16 a5 b5 :8 d5 e5 e5{-} a5 d6.4 |\r\n                \\\\ts 2 4 d6{-}.2 |\r\n                \\\\ts 4 4 r.8 :16 g5 a5 :8 f#5 d5 d5{-}.2 |\r\n                r.1 |\r\n                r.1 |\r\n                \\\\tempo 88\r\n                \\\\ts 12 8 :8 g2 d3 g3 a3 b3 d4 a4 d4 b3 a3 g3 d3 |\r\n            \r\n            \r\n                \\\\staff {score} \\\\tuning piano \\\\instrument acousticgrandpiano \\\\ks G\r\n                :1 (d4 g4) |\r\n                :1 (d4 g4) |\r\n                :1 (d4 g4) |\r\n                :1 (d4 g4) |\r\n                \\\\ts 2 4 :2 (d4{-} g4{-}) |\r\n                \\\\ts 4 4 :1 (e4 g4) |\r\n                :1 (c4 d4 g4) |\r\n                \\\\ts 2 4 d4.2 |\r\n                \\\\ts 4 4 :2 (d4 g4) (e4 g4) |\r\n                :16 b3 c#4 e4 g4 g4{-}.4 :16 a3 c4 d4 e4 :8 f#4 d4 |\r\n                :16 ab3 c4 eb4 g4 (ab3{- d} c4{- d} eb4{- d} g4{- d}).2 |\r\n                \\\\tempo 88\r\n                \\\\clef F4\r\n                \\\\ts 12 8 :1 g2{d} |`,\r\n        utilAPI: null\r\n    };\r\n\r\n    /**\r\n     * Initializes the AlphaTab API\r\n     * Displays the piece of music on the screen\r\n     */\r\n    componentDidMount() {\r\n        // Initializes the AlphaTab API and displays the music\r\n        AlphaTabRunner.initializeAPI();\r\n\r\n        // TODO: What is utilAPI and does it need to be in this component's state?\r\n        this.setState({\r\n            utilAPI: new AlphaTabAPIUtility(\r\n                AlphaTabRunner.api,\r\n                AlphaTabRunner.currentTracks,\r\n                AlphaTabRunner.totalTracks\r\n            )\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Plays or pauses the music\r\n     */\r\n    playPauseHandler = () => {\r\n        AlphaTabRunner.api.playPause();\r\n    };\r\n\r\n    /**\r\n     * Resumes the AudioContext so that microphone input can be streamed in\r\n     */\r\n    resumeAudioContextHandler = () => {\r\n        PitchDetection.audioContext\r\n            .resume()\r\n            .then(() => {\r\n                console.log(PitchDetection.audioContext.state)\r\n            })\r\n            .catch(err => {\r\n                console.log(`[error][MusicContainer] ${err}`);\r\n            });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <section>\r\n                <div id='wrapper'>\r\n                    <div id='sketch-holder'></div>\r\n                    <div id='alpha-tab-container' data-tex='true'>\r\n                        {this.state.tex}\r\n                    </div>\r\n                </div>\r\n                <button onClick={this.playPauseHandler}>PLAY / PAUSE</button>\r\n                <button onClick={this.resumeAudioContextHandler}>RESUME</button>\r\n                <h2 id='frequency'>TEST</h2>\r\n            </section>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MusicContainer;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport MusicContainer from \"./MusicContainer/MusicContainer\";\r\n\r\nclass App extends Component {\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <MusicContainer />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}