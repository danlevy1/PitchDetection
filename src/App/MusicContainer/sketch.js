import p5 from "p5";

/**
 * Wrapper for local p5 setup and draw functions
 * @param {sketch} p Sketch object that will include all of the functions that will be called by p5
 */
const p5Sketch = p => {
    // how much space to add around note for drawing lines, obtained by guess and check
    const EXTRA_BAR_VARIANCE = 7;

    // document elements retrieved from the document
    let barCursor;
    let alphaTabContainer;

    // provided by reference which is updated in other functions
    let drawer;

    // reference to p5's canvas when created. It should overlay the AlphaTab canvas
    let canvas;

    // how large to draw the notehead
    // TODO Dynamically change based on scale of music
    let circleSize = 10;

    /**
     * This function is called twice. Once, upon initialization p5 calls it which we use to tell p5 to stop looping
     * Then, AlphaTab will call setup when its done being rendered. Then, the canvas can be setup for drawing since
     * the canvas overlays the AlphaTab container
     * TODO Ensure that the canvas can resize when AlphaTab rerenders, use resizeCanvas
     * @param {Drawer} drawerGiven p5 will not provide this but AlphaTabRunner provides a reference to the Drawer being used
     */
    p.setup = function(drawerGiven) {
        if (drawerGiven === undefined) {
            p.noLoop();
            return;
        }
        drawer = drawerGiven;
        // Retrieved by attaching unique IDs to elements generated by AlphaTab. Required editing AlphaTab.js directly
        barCursor = document.getElementById("bC");
        alphaTabContainer = document.getElementById("alpha-tab-container");

        // creates a canvas that overlaps the alphaTabContainer. Position is absolute for the canvas by default
        canvas = p.createCanvas(alphaTabContainer.clientWidth, alphaTabContainer.clientHeight);
        const x = 0;
        const y = 0;
        canvas.position(x, y);
        canvas.parent("sketch-holder");
    };

    /**
     * Draws the canvas on the screen. Requires that the canvas is not undefined ie setup has run
     * TODO Handle sheet music scale
     */
    p.draw = function() {       
        // sets the background color to greyish
        p.background(245);
        // uncomment for white background, only need one color background so comment the other one if so
        //p.background(255);

        // dont draw the outline of the shape, note: you need to turn stroke on to draw lines as we do below.
        p.noStroke();

        let currentHeight;
        let sharpPos;
        if (drawer) {
            currentHeight = drawer.noteHeight;

            // fills with pink
            p.fill(255, 0, 255);

            // Binds x position to the bar cursor
            let posX = barCursor.getClientRects()[0].left.valueOf() + window.scrollX;

            // TODO Handle resizing scale
            // places sharp if present beside the note. These magic values were calculated via trial and error
            sharpPos = [posX - 14, currentHeight + 3.5];

            // actually draws note circle at the given position
            p.ellipse(posX, currentHeight, circleSize, circleSize);

            // Sentinel value of -1 indicates silence
            if (drawer.note.midiVal < 0) {
                // indicates that we want to draw lines
                p.stroke(0);

                // TODO Consider removing and not drawing note at all
                // draws x through the note
                p.line(
                    posX - EXTRA_BAR_VARIANCE,
                    currentHeight + EXTRA_BAR_VARIANCE,
                    posX + EXTRA_BAR_VARIANCE,
                    currentHeight - EXTRA_BAR_VARIANCE
                );
                p.line(
                    posX + EXTRA_BAR_VARIANCE,
                    currentHeight + EXTRA_BAR_VARIANCE,
                    posX - EXTRA_BAR_VARIANCE,
                    currentHeight - EXTRA_BAR_VARIANCE
                );

                // restore noStroke to not include outlines of other objects
                p.noStroke();
            }

            // TODO Handle resizing scale
            // Adds sharp symbol if needed
            if (drawer.note.isSharp) {
                p.text("#", sharpPos[0], sharpPos[1]);
            }

            // TODO Ensure that this works when switching what part to sing with
            // Adds ledger lines above or below the staff
            if (drawer.belowOrAbove !== 0) {
                let isIncreasing = drawer.belowOrAbove > 0;
                p.stroke(0);
                let height = isIncreasing
                    ? drawer.topLine
                    : drawer.firstLine - drawer.distanceBetweenLines;
                for (let i = 0; i < Math.abs(drawer.belowOrAbove); i++) {
                    if (isIncreasing) {
                        height -= drawer.distanceBetweenLines;
                    } else {
                        height += drawer.distanceBetweenLines;
                    }
                    p.line(posX - EXTRA_BAR_VARIANCE, height, posX + EXTRA_BAR_VARIANCE, height);
                }
                p.noStroke();
            }
        }

        // TODO Remove and get a line across the screen
        // Fills the screen with white which wipes the previous result
        p.fill(255);
    };
};

export default new p5(p5Sketch);
